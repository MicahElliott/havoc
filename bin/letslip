#! /bin/zsh

### letslip — creates a release that is uploaded to Github

# This "release process" could be automated with github actions, but this
# script is so simple that I'm not bothering for now. And I still push
# frequent bugs to master, so this explicit manual step for truly tested
# commits is safer.

# Creating releases is useful because eget is able to then install captain and
# all its tools with:
#   % eget micahelliott/captain

if ! [[ -d bin ]]; then print "Expected to see executables in bin/ dir."; exit 1; fi

suffix=
if [[ -n $1 ]]; then suffix="-$1"; fi

vdt=$(date +v%Y.%m.%d)$suffix
projname=$(git config remote.origin.url | sed -e 's^.*/^^' -e 's/.git$//')
releasedir=releases
if ! [[ -d $releasedir ]]
then print "Creating ‘$releasedir’ dir; you should add it to ‘.gitignore’.";
     mkdir $releasedir;
fi
# artifact=captain-$vdt.tgz
artifact=$releasedir/$projname-$vdt.tgz

print "Creating artifact of runnable tools in bin dir: $artifact"
tar czvf $artifact -C bin .

print "\nWill create and push git tag: $vdt"
read -qk "?Proceed? [y/n] " || exit 1
print

if ! git tag $vdt; then print 'Unable to create tag.'; exit 1; fi
git push origin $vdt

doc=$releasedir/$vdt.md
wardoc > $doc
print "Created release doc ‘$doc’"
read -qk '?Edit? [y/n] ' && $EDITOR $doc

# print "You should have already created and pushed a git tag: $vdt"
# print "Now manually upload $artifact to https://github.com/MicahElliott/$projname/releases"

print "\nCreating a new release on github"
gh release create -t "$vdt" -F $doc $vdt $artifact
