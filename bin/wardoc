#! /bin/zsh

### wardoc â€” categorize and auto-document recent commits into markdown that's suitable as a pretty release page

start=$argv[1]
newtag=$argv[2]
range=$argv[3]

print -- start: $start -- range: $range -- newtag: $newtag >&2

# Selected kinda from: gitmoji -l
declare -A emojis=(
     ':books:'       'Documentation'
     ':sparkles:'    'Features'
     ':bug:'         'Bug Fixes'
     ':wrench:'      'Configuration'
     ':recycle:'     'Refactors'
     ':zap:'         'Performance'
     # ':tada:'        'Release'
     ':lock:'        'Security'
     ':boom:'        'Breaking Changes'
     ':wastebasket:' 'Removals'
     ':test_tube:'   'Testing'
     ':lipstick:'    'User Interface'
     ':zap:'         'Performance'

     'fix:'      'Bug Fixes'
     'feat:'     'Features'
     'refactor:' 'Refactors'
     'docs:'     'Documentation'
     'build:'    'Build Tooling'
     'test:'     'Testing'
     'style:'    'Styling'
     'breaking change:' 'Breaking Changes'
)

# Could instead get this from parsing .git/config:remote.origin.url (url = git@github.com:MicahElliott/captain.git)
# repo=${GITHUB_REPOSITORY?var must be set to something like: octocat/Hello-World}
repo=$(git config remote.origin.url | sed -e 's/.*://' -e 's/.git$//')
ghurl='https://github.com/'
# repo="MicahElliott/captain"
url="$ghurl$repo"

# releaseurl="$url/releases/tag/$tag2"
releaseurl="$url/releases/tag/$newtag"
# print "# [${tag2}]($releaseurl)\n"
# This is wrong if range is date-based, but ignore
# print "**[Full Changelog]($url/compare/$range$newtag)**"
print "**[Full Changelog]($url/compare/$start...$newtag)**"

# Read into array
# logs=$(git log --pretty=format:"%s (%h)" $range)
# lines=()
# git log --pretty=format:"%s (%h)" $range >&2
lines=( "${(@f)$( git log --pretty=format:"%s (%h)" $=range )}" )
# print "git log --pretty=format:'(%h)' $range" >&2
# git log --pretty=format:"%s (%h)" $range | while read -r l; do lines+=$l; done
# git log --pretty=format:"%s (%h)" v2025.01.07...v2025.02.02 | while read -r l; do lines+=$l; done

# TODO summarize change with LLM
# ( print "Summarize the following git commits in a couple paragraphs" ; git log HEAD~19 ) | llm

print "\nCommits to be included:\n${(j:\n:)lines}" >&2

cats=( $(print -l $lines |cut -f1 -d' ' | sort -u) )
# print $cats

for c in $cats
do if [[ -n $emojis[$c] ]]
   then print "\n## $emojis[$c]\n"
        logs=()
        print -l $lines | grep $c | while read -r l; do logs+=$l; done
        for l in $logs; do print -- "- $l"; done
   fi
done

print -- "\n_This release was created with [havoc](https://github.com/MicahElliott/havoc)._"
