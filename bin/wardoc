#! /bin/zsh

### wardoc — categorize and auto-document recent commits into markdown that's suitable as a pretty release page
#
# This is primarily called by havoc, but you can call it directly for testing.
# Note that it is non-interactive.

start=$argv[1]
newtag=$argv[2]
range=$argv[3]
dosummary=$argv[4]

llmprompt="Summarize the following git commits in a couple concise paragraphs, without referring to commit hashes:\n\n"

# Format of commit lines can be customized
# Consider showing author name and date in defaults: %an, %aI
# fmt=${HAVOC_COMMIT_FORMAT-'%s (%h) (:sunglasses:%an)'}
fmt=${HAVOC_COMMIT_FORMAT-'%s (%h) — _%an_'}

teamwise=${HAVOC_TEAMWISE}
teamfile='devteams.tsv'

# Option and setup to print tables
# If going tabular, just ignore any user-set commit format
tabular=${HAVOC_TABULAR}
bullet='-'
theader='
'
if [[ -n $tabular ]]
then bullet='|'
     fmt='%s (%h) | %as | %an |'
     theader='
| Message | Author | Date |
|---------|--------|------|
'
fi

# print -- start: $start -- newtag: $newtag -- range: $range >&2

feat=':new: Features'
bugs=':mechanic: Fixes (problems/brokenness)'
misc=':basket: Other/Misc (non-user facing)'
breaking=':bomb: Breaking Changes'
crises=':comet: Crises'

# Selected kinda from: gitmoji -l
declare -A bucketmap=(
     # GITMOJI (my version)
     ':sparkles:'    $feat # Features
     ':tada:'        $feat # begin project or major feature
     ':books:'       $feat # docs/comments (also memo)
     ':zap:'         $feat # Performance
     ':lock:'        $feat # Security/Privacy
     ':zap:'         $feat # perf (also racehorse/rabbit)
     ':wheelchair:'  $feat # accessibility
     ':lipstick:'    $feat # User Interface
     ':zap:'         $feat # Performance
     ':abc:'         $feat # i18n
     ':construction:' $feat # WIP, progress on incomplete feature

     ':bug:'         $bugs # Bug Fixes
     ':wastebasket:' $bugs # Removals

     ':wrench:'      $misc # Configuration
     ':recycle:'     $misc # Refactors
     ':rat:'         $misc # tests (also lab_coat/test_tube)
     ':flags:'       $misc # feature flag
     ':guard:'       $misc # compiler/linter/CI problem (temporary)
     ':ledger:'      $misc # logs (also satellite/mag)
     ':package:'     $misc # update deps (arrow_up)
     ':recycle:'     $misc # refactor/move things (also truck)
     ':poop:'        $misc # write bad code (OR remove code?)
     ':wrench:'      $misc # config (also hammer)
     ':bricks:'      $misc # infra
     ':key:'         $misc # secrets
     ':alien:'       $misc # 3rd-party API changes
     ':robot:'       $misc # automation
     ':alembic:'     $misc # experiments
     ':stethoscope:' $misc # health-check
     ':thread:'      $misc # concurrency

     ':boom:'        $breaking # Breaking Changes

     # MORE STANDARD (traditional)
     'feat:'     $feat # Features
     'docs:'     $feat # Documentation
     'fix:'      $bugs  # Bug Fixes
     'refactor:' $misc # Refactors
     'build:'    $misc # Build Tooling
     'test:'     $misc # Testing
     'style:'    $misc # Styling
     'breaking change:' $breaking # Breaking Changes
)

declare -A trademojis=(
     'feat:'     ':sparkles:'
     'docs:'     ':sparkles:'
     'fix:'      ':bug:'
     'refactor:' ':misc:'
     'build:'    ':misc:'
     'test:'     ':misc:'
     'style:'    ':misc:'
     'breaking change:' ':boom:'
)

repo=$(git config remote.origin.url | sed -e 's/.*://' -e 's/.git$//')
ghurl='https://github.com/'
# repo="MicahElliott/captain"
url="$ghurl$repo"

releaseurl="$url/releases/tag/$newtag"
print "**[Full Changelog]($url/compare/$start...$newtag)**"

# Read formatted commits into array
commits=( "${(@f)$( git log --pretty=format:$fmt $=range )}" )

if (( dosummary > 0 ))
then print "\nGenerating an LLM summary; this can take a while...." >&2
     print "\n## :loudspeaker: Overview (LLM generated)\n"
     ( print $llmprompt ; git log $range ) | llm
     # print
fi

if (( $#commits < 20 ))
then print "\n\nCommits being considered for inclusion:\n${(j:\n:)commits}" >&2
else print "\nToo many commits ($#commits) to show here." >&2
fi

prefixes=( $(print -l $commits |cut -f1 -d' ' | sort -u) )
# print prefixes: $prefixes >2

# Print each bucket with all of its commit types in it.
# Eg, feat bucket has sparkles/feat and books/docs together.
org_projwise () {
     buckets=( "$feat" "$bugs" "$misc" "$breaking" "$crises" )
     for bucket in $buckets
     do   curs=()
          for c in $commits
          do   pre=$(cut -f1 -d' ' <<< $c)
               # This has the added benefit of selecting only the registered prefixes,
               # so commit not following the proper pattern will be auto-discarded.
               if [[ $bucketmap[$pre] == $bucket ]]
               then # print -- p: $pre -- t: $trademojis[$pre]
                    # Prefix traditional style with emojis
                    trad="$trademojis[$pre]"
                    if [[ -n $trad ]]; then c="$trad $c"; fi
                    curs+=$c
               fi
          done
          if (( $#curs > 0 ))
          then print "\n## $bucket";
               print -n -- $theader
               for x in $curs; do print -- "$bullet $x"; done
          fi
     done
}

# Group commits into team sections
org_teamwise () {
     # Convert TSV to assoc array
     estr=$( print -- 'declare -A devs=('
             sed -r -e 's/\t/" "/g' -e 's/^/"/' -e 's/$/"/' $teamfile
             print ')'
         )
     eval "$estr"

     llmprompt2="Summarize the following git commits in a very short concise paragraph, without referring
 to commit hashes, using git's ‘shortstat’ output at the end of each commit to quantify,
 prioritize, and emphasize the magnitude and importance of the change,
 without mentioning insertions or deletions.\n\n"

     llmprompt2="Summarize the following git commits in a concisely,
 grouped into key focus areas,
 without referring
 to commit hashes, using git's ‘shortstat’ output at the end of each commit to quantify,
 prioritize, and emphasize the magnitude and importance of the change,
 without mentioning insertions or deletions.\n\n"

     # TODO Add buckets
     for team in ${(uOn)devs}
     do   print "\n\n## $team\n"
          authors=()
          for d in ${(k)devs}
          do   if [[ ${devs[$d]} == $team ]]; then authors+="\\($d\\)"; fi
          done
          ( print $llmprompt2
            git --no-pager log --shortstat  --author ${(j:\|:)authors} $range
          ) | llm
          print
          # print "### Commits\n"
          print -- 'git --no-pager log --oneline --pretty=format:"$fmt" --author' "${(j:\|:)authors} $range"
          git --no-pager log --oneline --pretty=format:"$fmt" --author ${(j:\|:)authors} $range |
               grep -E '^(feat|docs|fix|refactor|test|style):' |
               sed -r 's/^/- /'
          print
     done

}

if (( -v teamwise ))
then org_teamwise
else org_projwise
fi

print -- "\n_This release was created with [havoc](https://github.com/MicahElliott/havoc)._"
