#! /bin/zsh

### havoc — creates a release that is uploaded to Github

# This "release process" could be automated with github actions, but this
# script is so simple that I'm not bothering for now. And I still push
# frequent bugs to master, so this explicit manual step for truly tested
# commits is safer.

# Creating releases is useful because eget is able to then install captain and
# all its tools with:
#   % eget micahelliott/captain

if ! [[ -d bin ]]; then print "Expected to see executables in bin/ dir."; exit 1; fi

pending=$(git cherry -v | wc -l)
if (( pending != 0 ))
then print "Detected local unpushed changes; push those and try again!"
     exit 1
fi

suffix=
if [[ -n $1 ]]; then suffix="-$1"; fi

vdt=$(date +v%Y.%m.%d)$suffix

if git tag | grep -q "$vdt"
then print "Can’t create release ‘$vdt’ for tag that alrealy exists!"
     print "Delete local and remote manually with:"
     print "  git tag --delete $vdt; git push --delete origin $vdt"
     exit 1
fi

print "CREATING NEW RELEASE: $vdt\n"

projname=$(git config remote.origin.url | sed -e 's^.*/^^' -e 's/.git$//')
releasedir=releases
if ! [[ -d $releasedir ]]
then print "\nCreating ‘$releasedir’ dir; you should add it to ‘.gitignore’.";
     mkdir $releasedir;
fi
# artifact=captain-$vdt.tgz
artifact=$releasedir/$projname-$vdt.tgz

print "Creating artifact of runnable tools in bin dir: $artifact"
tar czvf $artifact -C bin .

print "Creating checksum of artifact."
shasum=$artifact.sha256
# sha256sum --zero releases/havoc-v2025.02.06.tgz >releases/havoc-v2025.02.06.tgz.sha256
# Comparing to clj-kondo, expected to have to do this, but eget is pretty flexible it seems
# print -n $(sha256sum releases/captain-v2025.02.06.tgz |cut -f1 -d' ') >$shasum
sha256sum $artifact >$shasum

# Do the big job of creating doc
doc=$releasedir/$vdt.md
wardoc $vdt > $doc
print "\nCreated release doc: ‘$doc’"
read -qk '?Edit? [y/n] ' && $EDITOR $doc || {
     print "\nHere’s the release doc:\n"
     cat $doc | sed 's/^/  | /'
     # print -- '---'
}

print "\nWill create local git tag ‘$vdt’, then push tag and release to Github."
read -qk "?Proceed? [y/n] " || {
     # print "Canceling release, deleting local tag, exiting."
     print "Canceling release, exiting."
     # git tag -d $vdt
     exit 0
}
print "\n"

if ! git tag $vdt; then print 'Unable to create tag.'; exit 1; fi

git push origin $vdt || exit $?

# print "You should have already created and pushed a git tag: $vdt"
# print "Now manually upload $artifact to https://github.com/MicahElliott/$projname/releases"

print "\nCreating a new release on github."
gh release create -t "$vdt" -F $doc $vdt $artifact $shasum
